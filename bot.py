import datetime
import re

import telebot
from telebot import types

import config
from data import track_information_output
from menu import keyboard_menu
from sql import delete_track, read_all_user_tracks

bot = telebot.TeleBot(config.TOKEN)

track_number = ''
description = ''


def removing_spaces_in_track_number(track_number: str) -> str:
    """ –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ —Ç—Ä–µ–∫–µ"""
    return re.sub(r'\s+', '', track_number, flags=re.UNICODE)


def date_formatting(date: str):
    """ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É """
    date_format = datetime.datetime.strptime(date, '%Y-%m-%d %H:%M:%S.%f')
    day = date_format.day
    month = date_format.month
    year = date_format.year
    hour = date_format.hour
    minute = date_format.minute
    return f'{day}.{month}.{year} {hour}:{minute}'


def filtering_messages(message: str) -> bool:
    """ –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ """
    result = False
    messages_list = [
        '/start', '‚ûï –î–æ–±–∞–≤–∏—Ç—å', '‚öô –£–ø—Ä–∞–≤–ª—è—Ç—å', '‚õî –û—Ç–º–µ–Ω–∏—Ç—å'
    ]
    if message in messages_list:
        result = True
    return result


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá', reply_markup=keyboard_menu('menu'))


@bot.message_handler(content_types='text')
def message_reply_start(message):
    if filtering_messages(message.text):
        userId = message.from_user.id
        if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫:', reply_markup=keyboard_menu('cancel'))
            bot.register_next_step_handler(message, track_description)
        if message.text == "‚öô –£–ø—Ä–∞–≤–ª—è—Ç—å":
            records = read_all_user_tracks(userId)
            bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤:', reply_markup=keyboard_menu('menu'))
            for row in records:
                track_num = row[0]
                track_desc = row[1]
                track_date = date_formatting(row[2])
                otvet = types.InlineKeyboardMarkup(row_width=2)
                button1 = types.InlineKeyboardButton("‚Ñπ", callback_data='inf_' + track_num)
                button2 = types.InlineKeyboardButton("‚ùå", callback_data='del_' + track_num)
                otvet.add(button1, button2)
                bot.send_message(message.chat.id, f'–ù–æ–º–µ—Ä: {track_num}\n–û–ø–∏—Å–∞–Ω–∏–µ: {track_desc}\n–°–æ–∑–¥–∞–Ω–æ: {track_date}',
                                 reply_markup=otvet)
    else:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.', reply_markup=keyboard_menu('menu'))


def track_description(message):
    global track_number
    track_number = removing_spaces_in_track_number(message.text)
    if message.text == "‚õî –û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard_menu('menu'))
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', reply_markup=keyboard_menu('cancel'))
        bot.register_next_step_handler(message, track_info)


def track_info(message):
    global description
    description = message.text
    if message.text == "‚õî –û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard_menu('menu'))
    else:
        user_id = message.from_user.id
        text = track_information_output(track_number, user_id, description)
        bot.send_message(user_id, text, reply_markup=keyboard_menu('menu'))


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    command = str(call.data)[0:3]
    trackNumber = str(call.data)[4:]
    user_id = call.from_user.id
    if command == 'del':
        delete_track(trackNumber, user_id)
        bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ " + trackNumber + " —É–¥–∞–ª–µ–Ω–æ.")
    if command == 'inf':
        data = track_information_output(trackNumber, user_id, description)
        bot.send_message(call.message.chat.id, data)
